# importing Packages
import pandas as pd # data processing
import numpy as np # working with arrays
import matplotlib.pyplot as plt # visualization
import seaborn as sb # visualization
from termcolor import colored as cl # text customization
from sklearn.model_selection import train_test_split # data split
# importing algorithms
from sklearn.linear_model import LinearRegression # OLS algorithm
from sklearn.linear_model import Ridge # Ridge algorithm
from sklearn.linear_model import Lasso # Lasso algorithm
from sklearn.linear_model import BayesianRidge # Bayesian algorithm
from sklearn.linear_model import ElasticNet # ElasticNet algorithm
from sklearn.metrics import explained_variance_score as evs 
from sklearn.metrics import r2_score as r2
sb.set_style('whitegrid') # plot style
plt.rcParams['figure.figsize'] = (20, 10) # plot size
# IMPORTING DATA
df = pd.read_csv('./dataset/house_data.csv')
df.set_index('Id', inplace = True)
df.head(10)
# dropping null values
df.dropna(inplace = True)
df.isnull().sum()
 
sb.heatmap(df.corr(), annot = True, cmap = 'magma')
plt.savefig('heatmap.png')
plt.show()
def scatter_df(y_var):
 
 scatter_df = df.drop(y_var, axis = 1)
 i = df.columns
 
 plot1 = sb.scatterplot(x = i[0], y = y_var, data = df, color = 'orange', 
edgecolor = 'b', s = 150)
 plt.title('{} / Sale Price'.format(i[0]), fontsize = 16)
 plt.xlabel('{}'.format(i[0]), fontsize = 14)
 plt.ylabel('Sale Price', fontsize = 14)
 plt.xticks(fontsize = 12)
 plt.yticks(fontsize = 12)
 plt.savefig('scatter1.png')
 plt.show()
 
 plot2 = sb.scatterplot(x = i[1], y = y_var, data = df, color = 'yellow', 
edgecolor = 'b', s = 150)
 plt.title('{} / Sale Price'.format(i[1]), fontsize = 16)
 plt.xlabel('{}'.format(i[1]), fontsize = 14)
 plt.ylabel('Sale Price', fontsize = 14)
 plt.xticks(fontsize = 12)
 plt.yticks(fontsize = 12)
 plt.savefig('scatter2.png')
 plt.show()
 
 plot3 = sb.scatterplot(x = i[2], y = y_var, data = df, color = 'aquamarine', 
edgecolor = 'b', s = 150)
 plt.title('{} / Sale Price'.format(i[2]), fontsize = 16)
 plt.xlabel('{}'.format(i[2]), fontsize = 14)
 plt.ylabel('Sale Price', fontsize = 14)
 plt.xticks(fontsize = 12)
 plt.yticks(fontsize = 12)
 plt.savefig('scatter3.png')
 plt.show()
 
 plot4 = sb.scatterplot(x = i[3], y = y_var, data = df, color = 'deepskyblue', 
edgecolor = 'b', s = 150)
 plt.title('{} / Sale Price'.format(i[3]), fontsize = 16)
 plt.xlabel('{}'.format(i[3]), fontsize = 14)
 plt.ylabel('Sale Price', fontsize = 14)
 plt.xticks(fontsize = 12)
 plt.yticks(fontsize = 12)
 plt.savefig('scatter4.png')
 plt.show()
 
 plot5 = sb.scatterplot(x = i[4], y = y_var, data = df, color = 'crimson', 
edgecolor = 'white', s = 150)
 plt.title('{} / Sale Price'.format(i[4]), fontsize = 16)
 plt.xlabel('{}'.format(i[4]), fontsize = 14)
 plt.ylabel('Sale Price', fontsize = 14)
 plt.xticks(fontsize = 12)
 plt.yticks(fontsize = 12)
 plt.savefig('scatter5.png')
 plt.show()
 
 plot6 = sb.scatterplot(x = i[5], y = y_var, data = df, color = 'darkviolet', 
edgecolor = 'white', s = 150)
 plt.title('{} / Sale Price'.format(i[5]), fontsize = 16)
 plt.xlabel('{}'.format(i[5]), fontsize = 14)
 plt.ylabel('Sale Price', fontsize = 14)
 plt.xticks(fontsize = 12)
 plt.yticks(fontsize = 12)
 plt.savefig('scatter6.png')
 plt.show()
 
 plot7 = sb.scatterplot(x = i[6], y = y_var, data = df, color = 'khaki', edgecolor 
= 'b', s = 150)
 plt.title('{} / Sale Price'.format(i[6]), fontsize = 16)
 plt.xlabel('{}'.format(i[6]), fontsize = 14)
 plt.ylabel('Sale Price', fontsize = 14)
 plt.xticks(fontsize = 12)
 plt.yticks(fontsize = 12)
 plt.savefig('scatter7.png')
 plt.show()
 
 plot8 = sb.scatterplot(x = i[7], y = y_var, data = df, color = 'gold', edgecolor = 
'b', s = 150)
 plt.title('{} / Sale Price'.format(i[7]), fontsize = 16)
 plt.xlabel('{}'.format(i[7]), fontsize = 14)
 plt.ylabel('Sale Price', fontsize = 14)
 plt.xticks(fontsize = 12)
 plt.yticks(fontsize = 12)
 plt.savefig('scatter8.png')
 plt.show()
 
 plot9 = sb.scatterplot(x = i[8], y = y_var, data = df, color = 'r', edgecolor = 'b', 
s = 150)
 plt.title('{} / Sale Price'.format(i[8]), fontsize = 16)
 plt.xlabel('{}'.format(i[8]), fontsize = 14)
 plt.ylabel('Sale Price', fontsize = 14)
 plt.xticks(fontsize = 12)
 plt.yticks(fontsize = 12)
 plt.savefig('scatter9.png')
 plt.show()
 
 plot10 = sb.scatterplot(x = i[9], y = y_var, data = df, color = 'deeppink', 
edgecolor = 'b', s = 150)
 plt.title('{} / Sale Price'.format(i[9]), fontsize = 16)
 plt.xlabel('{}'.format(i[9]), fontsize = 14)
 plt.ylabel('Sale Price', fontsize = 14)
 plt.xticks(fontsize = 12)
 plt.yticks(fontsize = 12)
 plt.savefig('scatter10.png')
 plt.show()
 
scatter_df('SalePrice')
sb.histplot(df['SalePrice'], color = 'r')
plt.title('Sale Price Distribution', fontsize = 16)
plt.xlabel('Sale Price', fontsize = 14)
plt.ylabel('Frequency', fontsize = 14)
plt.xticks(fontsize = 12)
plt.yticks(fontsize = 12)
plt.savefig('distplot.png')
plt.show()
# FEATURE SELECTION & DATA SPLIT
x_var = df[['LotArea', 'MasVnrArea', 'BsmtUnfSF', 'TotalBsmtSF', '1stFlrSF', 
 '2ndFlrSF', 'GrLivArea', 'GarageArea', 'WoodDeckSF', 
'OpenPorchSF']].values
y_var = df['SalePrice'].values
x_train, x_test, y_train, y_test = train_test_split(x_var, y_var, test_size = 0.2, 
random_state = 0)
print("X_train samples: ", x_train[0:5])
print("\n\nY_train samples: ", y_train[0:5])
print("\n\nX_test samples: ", x_test[0:5])
print("\n\nY_test samples: ", y_test[0:5])
# OLS
ols = LinearRegression()
ols.fit(x_train, y_train)
ols_yhat = ols.predict(x_test)
# Ridge
ridge = Ridge(alpha = 0.5)
ridge.fit(x_train, y_train)
ridge_yhat = ridge.predict(x_test)
# Lasso
lasso = Lasso(alpha = 0.01)
lasso.fit(x_train, y_train)
lasso_yhat = lasso.predict(x_test)
# Bayesian
bayesian = BayesianRidge()
bayesian.fit(x_train, y_train)
bayesian_yhat = bayesian.predict(x_test)
# Elastic Net
en = ElasticNet(alpha = 0.01)
en.fit(x_train, y_train)
en_yhat = en.predict(x_test)
print(cl('EXPLAINED VARIANCE SCORE:', attrs = ['bold']))
print('-------------------------------------------------------------------------------')
print(cl('OLS model : {}'.format(evs(y_test, ols_yhat)), attrs = ['bold']))
print(cl('Ridge model : {}'.format(evs(y_test, ridge_yhat)), attrs = ['bold']))
print(cl('Lasso model : {}'.format(evs(y_test, lasso_yhat)), attrs = ['bold']))
print(cl('Bayesian model : {}'.format(evs(y_test, bayesian_yhat)), attrs = 
['bold']))
print(cl('ElasticNet model : {}'.format(evs(y_test, en_yhat)), attrs = ['bold']))
print('-------------------------------------------------------------------------------')
print(cl('R-SQUARED:', attrs = ['bold']))
print('-------------------------------------------------------------------------------')
print(cl('R-Squared of OLS model is {}'.format(r2(y_test, ols_yhat)), attrs = 
['bold']))
print(cl('R-Squared of Ridge model is {}'.format(r2(y_test, ridge_yhat)), attrs = 
['bold']))
print(cl('R-Squared of Lasso model is {}'.format(r2(y_test, lasso_yhat)), attrs = 
['bold']))
print(cl('R-Squared of Bayesian model is {}'.format(r2(y_test, bayesian_yhat)), 
attrs = ['bold']))
print(cl('R-Squared of ElasticNet is {}'.format(r2(y_test, en_yhat)), attrs = 
['bold']))
print('-------------------------------------------------------------------------------')
 
